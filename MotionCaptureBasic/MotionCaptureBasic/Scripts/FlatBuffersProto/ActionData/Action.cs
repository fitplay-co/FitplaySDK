// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ActionData
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Action : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Action GetRootAsAction(ByteBuffer _bb) { return GetRootAsAction(_bb, new Action()); }
  public static Action GetRootAsAction(ByteBuffer _bb, Action obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Action __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActionData.General? General { get { int o = __p.__offset(4); return o != 0 ? (ActionData.General?)(new ActionData.General()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ActionData.Stand? Stand { get { int o = __p.__offset(6); return o != 0 ? (ActionData.Stand?)(new ActionData.Stand()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ActionData.Walk? Walk { get { int o = __p.__offset(8); return o != 0 ? (ActionData.Walk?)(new ActionData.Walk()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ActionData.Jump? Jump { get { int o = __p.__offset(10); return o != 0 ? (ActionData.Jump?)(new ActionData.Jump()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ActionData.Gaze? Gaze { get { int o = __p.__offset(12); return o != 0 ? (ActionData.Gaze?)(new ActionData.Gaze()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ActionData.Squat? Squat { get { int o = __p.__offset(14); return o != 0 ? (ActionData.Squat?)(new ActionData.Squat()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ActionData.Ground? Ground { get { int o = __p.__offset(16); return o != 0 ? (ActionData.Ground?)(new ActionData.Ground()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ActionData.Fitting? Fitting { get { int o = __p.__offset(18); return o != 0 ? (ActionData.Fitting?)(new ActionData.Fitting()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<ActionData.Action> CreateAction(FlatBufferBuilder builder,
      Offset<ActionData.General> generalOffset = default(Offset<ActionData.General>),
      Offset<ActionData.Stand> standOffset = default(Offset<ActionData.Stand>),
      Offset<ActionData.Walk> walkOffset = default(Offset<ActionData.Walk>),
      Offset<ActionData.Jump> jumpOffset = default(Offset<ActionData.Jump>),
      Offset<ActionData.Gaze> gazeOffset = default(Offset<ActionData.Gaze>),
      Offset<ActionData.Squat> squatOffset = default(Offset<ActionData.Squat>),
      Offset<ActionData.Ground> groundOffset = default(Offset<ActionData.Ground>),
      Offset<ActionData.Fitting> fittingOffset = default(Offset<ActionData.Fitting>)) {
    builder.StartTable(8);
    Action.AddFitting(builder, fittingOffset);
    Action.AddGround(builder, groundOffset);
    Action.AddSquat(builder, squatOffset);
    Action.AddGaze(builder, gazeOffset);
    Action.AddJump(builder, jumpOffset);
    Action.AddWalk(builder, walkOffset);
    Action.AddStand(builder, standOffset);
    Action.AddGeneral(builder, generalOffset);
    return Action.EndAction(builder);
  }

  public static void StartAction(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddGeneral(FlatBufferBuilder builder, Offset<ActionData.General> generalOffset) { builder.AddOffset(0, generalOffset.Value, 0); }
  public static void AddStand(FlatBufferBuilder builder, Offset<ActionData.Stand> standOffset) { builder.AddOffset(1, standOffset.Value, 0); }
  public static void AddWalk(FlatBufferBuilder builder, Offset<ActionData.Walk> walkOffset) { builder.AddOffset(2, walkOffset.Value, 0); }
  public static void AddJump(FlatBufferBuilder builder, Offset<ActionData.Jump> jumpOffset) { builder.AddOffset(3, jumpOffset.Value, 0); }
  public static void AddGaze(FlatBufferBuilder builder, Offset<ActionData.Gaze> gazeOffset) { builder.AddOffset(4, gazeOffset.Value, 0); }
  public static void AddSquat(FlatBufferBuilder builder, Offset<ActionData.Squat> squatOffset) { builder.AddOffset(5, squatOffset.Value, 0); }
  public static void AddGround(FlatBufferBuilder builder, Offset<ActionData.Ground> groundOffset) { builder.AddOffset(6, groundOffset.Value, 0); }
  public static void AddFitting(FlatBufferBuilder builder, Offset<ActionData.Fitting> fittingOffset) { builder.AddOffset(7, fittingOffset.Value, 0); }
  public static Offset<ActionData.Action> EndAction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ActionData.Action>(o);
  }
  public static void FinishActionBuffer(FlatBufferBuilder builder, Offset<ActionData.Action> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedActionBuffer(FlatBufferBuilder builder, Offset<ActionData.Action> offset) { builder.FinishSizePrefixed(offset.Value); }
}


}
