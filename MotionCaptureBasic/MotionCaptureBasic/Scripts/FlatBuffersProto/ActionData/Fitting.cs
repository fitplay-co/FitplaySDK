// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ActionData
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Fitting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Fitting GetRootAsFitting(ByteBuffer _bb) { return GetRootAsFitting(_bb, new Fitting()); }
  public static Fitting GetRootAsFitting(ByteBuffer _bb, Fitting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Fitting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActionData.Joint? Rotation(int j) { int o = __p.__offset(4); return o != 0 ? (ActionData.Joint?)(new ActionData.Joint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RotationLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ActionData.Joint? MirrorRotation(int j) { int o = __p.__offset(6); return o != 0 ? (ActionData.Joint?)(new ActionData.Joint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MirrorRotationLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ActionData.Joint? LocalRotation(int j) { int o = __p.__offset(8); return o != 0 ? (ActionData.Joint?)(new ActionData.Joint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int LocalRotationLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ActionData.Joint? MirrorLocalRotation(int j) { int o = __p.__offset(10); return o != 0 ? (ActionData.Joint?)(new ActionData.Joint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MirrorLocalRotationLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ActionData.FkLandmark? FittedLandmarks(int j) { int o = __p.__offset(12); return o != 0 ? (ActionData.FkLandmark?)(new ActionData.FkLandmark()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FittedLandmarksLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float FittedError { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<ActionData.Fitting> CreateFitting(FlatBufferBuilder builder,
      VectorOffset rotationOffset = default(VectorOffset),
      VectorOffset mirrorRotationOffset = default(VectorOffset),
      VectorOffset localRotationOffset = default(VectorOffset),
      VectorOffset mirrorLocalRotationOffset = default(VectorOffset),
      VectorOffset fittedLandmarksOffset = default(VectorOffset),
      float fittedError = 0.0f) {
    builder.StartTable(6);
    Fitting.AddFittedError(builder, fittedError);
    Fitting.AddFittedLandmarks(builder, fittedLandmarksOffset);
    Fitting.AddMirrorLocalRotation(builder, mirrorLocalRotationOffset);
    Fitting.AddLocalRotation(builder, localRotationOffset);
    Fitting.AddMirrorRotation(builder, mirrorRotationOffset);
    Fitting.AddRotation(builder, rotationOffset);
    return Fitting.EndFitting(builder);
  }

  public static void StartFitting(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddRotation(FlatBufferBuilder builder, VectorOffset rotationOffset) { builder.AddOffset(0, rotationOffset.Value, 0); }
  public static VectorOffset CreateRotationVector(FlatBufferBuilder builder, Offset<ActionData.Joint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRotationVectorBlock(FlatBufferBuilder builder, Offset<ActionData.Joint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRotationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMirrorRotation(FlatBufferBuilder builder, VectorOffset mirrorRotationOffset) { builder.AddOffset(1, mirrorRotationOffset.Value, 0); }
  public static VectorOffset CreateMirrorRotationVector(FlatBufferBuilder builder, Offset<ActionData.Joint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMirrorRotationVectorBlock(FlatBufferBuilder builder, Offset<ActionData.Joint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMirrorRotationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLocalRotation(FlatBufferBuilder builder, VectorOffset localRotationOffset) { builder.AddOffset(2, localRotationOffset.Value, 0); }
  public static VectorOffset CreateLocalRotationVector(FlatBufferBuilder builder, Offset<ActionData.Joint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLocalRotationVectorBlock(FlatBufferBuilder builder, Offset<ActionData.Joint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLocalRotationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMirrorLocalRotation(FlatBufferBuilder builder, VectorOffset mirrorLocalRotationOffset) { builder.AddOffset(3, mirrorLocalRotationOffset.Value, 0); }
  public static VectorOffset CreateMirrorLocalRotationVector(FlatBufferBuilder builder, Offset<ActionData.Joint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMirrorLocalRotationVectorBlock(FlatBufferBuilder builder, Offset<ActionData.Joint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMirrorLocalRotationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFittedLandmarks(FlatBufferBuilder builder, VectorOffset fittedLandmarksOffset) { builder.AddOffset(4, fittedLandmarksOffset.Value, 0); }
  public static VectorOffset CreateFittedLandmarksVector(FlatBufferBuilder builder, Offset<ActionData.FkLandmark>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFittedLandmarksVectorBlock(FlatBufferBuilder builder, Offset<ActionData.FkLandmark>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFittedLandmarksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFittedError(FlatBufferBuilder builder, float fittedError) { builder.AddFloat(5, fittedError, 0.0f); }
  public static Offset<ActionData.Fitting> EndFitting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ActionData.Fitting>(o);
  }
}


}
