// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PoseData
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Pose : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Pose GetRootAsPose(ByteBuffer _bb) { return GetRootAsPose(_bb, new Pose()); }
  public static Pose GetRootAsPose(ByteBuffer _bb, Pose obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Pose __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Action { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetActionBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetActionArray() { return __p.__vector_as_array<byte>(4); }
  public bool RgbdEnabled { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public PoseData.Point? Keypoints(int j) { int o = __p.__offset(8); return o != 0 ? (PoseData.Point?)(new PoseData.Point()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int KeypointsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public PoseData.Point? Keypoints3D(int j) { int o = __p.__offset(10); return o != 0 ? (PoseData.Point?)(new PoseData.Point()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int Keypoints3DLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PoseData.Pose> CreatePose(FlatBufferBuilder builder,
      StringOffset actionOffset = default(StringOffset),
      bool rgbdEnabled = false,
      VectorOffset keypointsOffset = default(VectorOffset),
      VectorOffset keypoints3DOffset = default(VectorOffset)) {
    builder.StartTable(4);
    Pose.AddKeypoints3D(builder, keypoints3DOffset);
    Pose.AddKeypoints(builder, keypointsOffset);
    Pose.AddAction(builder, actionOffset);
    Pose.AddRgbdEnabled(builder, rgbdEnabled);
    return Pose.EndPose(builder);
  }

  public static void StartPose(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddAction(FlatBufferBuilder builder, StringOffset actionOffset) { builder.AddOffset(0, actionOffset.Value, 0); }
  public static void AddRgbdEnabled(FlatBufferBuilder builder, bool rgbdEnabled) { builder.AddBool(1, rgbdEnabled, false); }
  public static void AddKeypoints(FlatBufferBuilder builder, VectorOffset keypointsOffset) { builder.AddOffset(2, keypointsOffset.Value, 0); }
  public static VectorOffset CreateKeypointsVector(FlatBufferBuilder builder, Offset<PoseData.Point>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateKeypointsVectorBlock(FlatBufferBuilder builder, Offset<PoseData.Point>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartKeypointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddKeypoints3D(FlatBufferBuilder builder, VectorOffset keypoints3DOffset) { builder.AddOffset(3, keypoints3DOffset.Value, 0); }
  public static VectorOffset CreateKeypoints3DVector(FlatBufferBuilder builder, Offset<PoseData.Point>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateKeypoints3DVectorBlock(FlatBufferBuilder builder, Offset<PoseData.Point>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartKeypoints3DVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PoseData.Pose> EndPose(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PoseData.Pose>(o);
  }
  public static void FinishPoseBuffer(FlatBufferBuilder builder, Offset<PoseData.Pose> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPoseBuffer(FlatBufferBuilder builder, Offset<PoseData.Pose> offset) { builder.FinishSizePrefixed(offset.Value); }
}


}
