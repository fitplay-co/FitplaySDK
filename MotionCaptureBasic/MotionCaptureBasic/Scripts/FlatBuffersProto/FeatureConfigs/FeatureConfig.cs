// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FeatureConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FeatureConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static FeatureConfig GetRootAsFeatureConfig(ByteBuffer _bb) { return GetRootAsFeatureConfig(_bb, new FeatureConfig()); }
  public static FeatureConfig GetRootAsFeatureConfig(ByteBuffer _bb, FeatureConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FeatureConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string FeatureId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFeatureIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetFeatureIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetFeatureIdArray() { return __p.__vector_as_array<byte>(4); }
  public bool Enable { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Action { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetActionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetActionArray() { return __p.__vector_as_array<byte>(8); }
  public string Type { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(10); }
  public string Data { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<FeatureConfigs.FeatureConfig> CreateFeatureConfig(FlatBufferBuilder builder,
      StringOffset feature_idOffset = default(StringOffset),
      bool enable = false,
      StringOffset actionOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset dataOffset = default(StringOffset)) {
    builder.StartTable(5);
    FeatureConfig.AddData(builder, dataOffset);
    FeatureConfig.AddType(builder, typeOffset);
    FeatureConfig.AddAction(builder, actionOffset);
    FeatureConfig.AddFeatureId(builder, feature_idOffset);
    FeatureConfig.AddEnable(builder, enable);
    return FeatureConfig.EndFeatureConfig(builder);
  }

  public static void StartFeatureConfig(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddFeatureId(FlatBufferBuilder builder, StringOffset featureIdOffset) { builder.AddOffset(0, featureIdOffset.Value, 0); }
  public static void AddEnable(FlatBufferBuilder builder, bool enable) { builder.AddBool(1, enable, false); }
  public static void AddAction(FlatBufferBuilder builder, StringOffset actionOffset) { builder.AddOffset(2, actionOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(3, typeOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, StringOffset dataOffset) { builder.AddOffset(4, dataOffset.Value, 0); }
  public static Offset<FeatureConfigs.FeatureConfig> EndFeatureConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FeatureConfigs.FeatureConfig>(o);
  }
}


}
