// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Sensor
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SensorClient : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SensorClient GetRootAsSensorClient(ByteBuffer _bb) { return GetRootAsSensorClient(_bb, new SensorClient()); }
  public static SensorClient GetRootAsSensorClient(ByteBuffer _bb, SensorClient obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SensorClient __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string SensorType { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSensorTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetSensorTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSensorTypeArray() { return __p.__vector_as_array<byte>(4); }
  public string SensorId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSensorIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSensorIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSensorIdArray() { return __p.__vector_as_array<byte>(6); }
  public string SensorInfo { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSensorInfoBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSensorInfoBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSensorInfoArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<Sensor.SensorClient> CreateSensorClient(FlatBufferBuilder builder,
      StringOffset sensorTypeOffset = default(StringOffset),
      StringOffset sensorIdOffset = default(StringOffset),
      StringOffset sensorInfoOffset = default(StringOffset)) {
    builder.StartTable(3);
    SensorClient.AddSensorInfo(builder, sensorInfoOffset);
    SensorClient.AddSensorId(builder, sensorIdOffset);
    SensorClient.AddSensorType(builder, sensorTypeOffset);
    return SensorClient.EndSensorClient(builder);
  }

  public static void StartSensorClient(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddSensorType(FlatBufferBuilder builder, StringOffset sensorTypeOffset) { builder.AddOffset(0, sensorTypeOffset.Value, 0); }
  public static void AddSensorId(FlatBufferBuilder builder, StringOffset sensorIdOffset) { builder.AddOffset(1, sensorIdOffset.Value, 0); }
  public static void AddSensorInfo(FlatBufferBuilder builder, StringOffset sensorInfoOffset) { builder.AddOffset(2, sensorInfoOffset.Value, 0); }
  public static Offset<Sensor.SensorClient> EndSensorClient(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Sensor.SensorClient>(o);
  }
  public static void FinishSensorClientBuffer(FlatBufferBuilder builder, Offset<Sensor.SensorClient> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSensorClientBuffer(FlatBufferBuilder builder, Offset<Sensor.SensorClient> offset) { builder.FinishSizePrefixed(offset.Value); }
}


}
