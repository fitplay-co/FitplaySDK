// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace OsInput
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct InputMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static InputMessage GetRootAsInputMessage(ByteBuffer _bb) { return GetRootAsInputMessage(_bb, new InputMessage()); }
  public static InputMessage GetRootAsInputMessage(ByteBuffer _bb, InputMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InputMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Version { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVersionBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetVersionBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetVersionArray() { return __p.__vector_as_array<byte>(4); }
  public OsInput.MessageType Type { get { int o = __p.__offset(6); return o != 0 ? (OsInput.MessageType)__p.bb.GetShort(o + __p.bb_pos) : OsInput.MessageType.None; } }
  public ApplicationClient.Client? Client { get { int o = __p.__offset(8); return o != 0 ? (ApplicationClient.Client?)(new ApplicationClient.Client()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ApplicationControl.Control? Control { get { int o = __p.__offset(10); return o != 0 ? (ApplicationControl.Control?)(new ApplicationControl.Control()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public PoseData.Pose? Pose { get { int o = __p.__offset(12); return o != 0 ? (PoseData.Pose?)(new PoseData.Pose()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Sensor.SensorFrame? SensorFrame { get { int o = __p.__offset(14); return o != 0 ? (Sensor.SensorFrame?)(new Sensor.SensorFrame()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Sensor.SensorClient? SensorClient { get { int o = __p.__offset(16); return o != 0 ? (Sensor.SensorClient?)(new Sensor.SensorClient()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Sensor.SensorControl? SensorControl { get { int o = __p.__offset(18); return o != 0 ? (Sensor.SensorControl?)(new Sensor.SensorControl()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<OsInput.InputMessage> CreateInputMessage(FlatBufferBuilder builder,
      StringOffset versionOffset = default(StringOffset),
      OsInput.MessageType type = OsInput.MessageType.None,
      Offset<ApplicationClient.Client> clientOffset = default(Offset<ApplicationClient.Client>),
      Offset<ApplicationControl.Control> controlOffset = default(Offset<ApplicationControl.Control>),
      Offset<PoseData.Pose> poseOffset = default(Offset<PoseData.Pose>),
      Offset<Sensor.SensorFrame> sensorFrameOffset = default(Offset<Sensor.SensorFrame>),
      Offset<Sensor.SensorClient> sensorClientOffset = default(Offset<Sensor.SensorClient>),
      Offset<Sensor.SensorControl> sensorControlOffset = default(Offset<Sensor.SensorControl>)) {
    builder.StartTable(8);
    InputMessage.AddSensorControl(builder, sensorControlOffset);
    InputMessage.AddSensorClient(builder, sensorClientOffset);
    InputMessage.AddSensorFrame(builder, sensorFrameOffset);
    InputMessage.AddPose(builder, poseOffset);
    InputMessage.AddControl(builder, controlOffset);
    InputMessage.AddClient(builder, clientOffset);
    InputMessage.AddVersion(builder, versionOffset);
    InputMessage.AddType(builder, type);
    return InputMessage.EndInputMessage(builder);
  }

  public static void StartInputMessage(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddVersion(FlatBufferBuilder builder, StringOffset versionOffset) { builder.AddOffset(0, versionOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, OsInput.MessageType type) { builder.AddShort(1, (short)type, 0); }
  public static void AddClient(FlatBufferBuilder builder, Offset<ApplicationClient.Client> clientOffset) { builder.AddOffset(2, clientOffset.Value, 0); }
  public static void AddControl(FlatBufferBuilder builder, Offset<ApplicationControl.Control> controlOffset) { builder.AddOffset(3, controlOffset.Value, 0); }
  public static void AddPose(FlatBufferBuilder builder, Offset<PoseData.Pose> poseOffset) { builder.AddOffset(4, poseOffset.Value, 0); }
  public static void AddSensorFrame(FlatBufferBuilder builder, Offset<Sensor.SensorFrame> sensorFrameOffset) { builder.AddOffset(5, sensorFrameOffset.Value, 0); }
  public static void AddSensorClient(FlatBufferBuilder builder, Offset<Sensor.SensorClient> sensorClientOffset) { builder.AddOffset(6, sensorClientOffset.Value, 0); }
  public static void AddSensorControl(FlatBufferBuilder builder, Offset<Sensor.SensorControl> sensorControlOffset) { builder.AddOffset(7, sensorControlOffset.Value, 0); }
  public static Offset<OsInput.InputMessage> EndInputMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OsInput.InputMessage>(o);
  }
  public static void FinishInputMessageBuffer(FlatBufferBuilder builder, Offset<OsInput.InputMessage> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedInputMessageBuffer(FlatBufferBuilder builder, Offset<OsInput.InputMessage> offset) { builder.FinishSizePrefixed(offset.Value); }
}


}
